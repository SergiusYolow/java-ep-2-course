/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import static java.awt.Component.LEFT_ALIGNMENT;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class MyElement extends javax.swing.JPanel
{
    private final String backgroundText = "choose item";
    private final String buttonText = "show choosing item";
    private ArrayList<String> chooserElements;
    private char acceptingSymbol;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    JComboBox comboBox;

    String h = "";
    String STR = "Button is preesed";
    Boolean flag1 = false, flag2 = false;

    public MyElement()
    {
        initComponents();
        initEnterKey();
    }

    public String getBackgroundText()
    {
        return this.backgroundText;
    }

    public void setBackgroundText(String s)
    {
        jLabel1.setText(s);
    }

    public String getButtonText()
    {
        return this.buttonText;
    }

    public void setButtonText(String s)
    {
        jButton1.setText(s);
    }

    public String[] getChooserElements()
    {
        String[] stockArr = new String[chooserElements.size()];
        stockArr = chooserElements.toArray(stockArr);
        return stockArr;
    }

    public void setChooserElements(String[] s)
    {
        chooserElements.clear();
        chooserElements.addAll(Arrays.asList(s));
        comboBox.removeAllItems();
        for (String el : s)
        {
            comboBox.addItem(el);
        }

    }

    public char getAcceptingSymbol()
    {
        return this.acceptingSymbol;
    }

    public void setAcceptingSymbol(char s)
    {
        this.acceptingSymbol = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText(backgroundText);
        jButton1.setText(buttonText);

        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        comboBox = new JComboBox();

        chooserElements = new ArrayList<String>();
        String[] defaultArgs = {"laba 1", "laba 2", "laba 3", "laba 4"};
        setChooserElements(defaultArgs);

        comboBox.setAlignmentX(LEFT_ALIGNMENT);
        comboBox.setFocusable(false);

        comboBox.addActionListener(new ActionListener()
                                   {
                                       @Override
                                       public void actionPerformed(ActionEvent event)
                                       {
                                           JComboBox<String> combo = (JComboBox<String>) event.getSource();

                                           h = (String) combo.getSelectedItem();
                                           int boxCount = combo.getItemCount();
                                           for (int i = 0; i < boxCount; i++)
                                           {
                                               if (h.equals(combo.getItemAt(i)))
                                               {
                                                   STR = "Selected " + (i + 1);
                                                   break;
                                               }
                                           }
                                       }
                                   }
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addComponent(comboBox)
                                .addGap(40, 40, 40)
                                .addComponent(jButton1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jButton1)
                                        .addComponent(comboBox)
                                )
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(this, STR);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void initEnterKey()
    {
        jButton1.addKeyListener(new KeyListener()
        {

            @Override
            public void keyTyped(KeyEvent e)
            {
                if (e.getKeyChar() == acceptingSymbol)
                {
                    jButton1.requestFocus();
                    jButton1.doClick();
                }
            }

            @Override
            public void keyPressed(KeyEvent e)
            {
            }

            @Override
            public void keyReleased(KeyEvent e)
            {
            }
        });
    }
}
